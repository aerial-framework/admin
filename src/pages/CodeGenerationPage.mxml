<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:components="components.*" activate="if(serverOK) refresh()"
          xmlns:layouts="org.flexlayouts.layouts.*" initialize="init()"
          width="100%" height="100%" paddingBottom="8" paddingLeft="8"
          paddingRight="8" paddingTop="8">

    <s:states>
        <s:State name="start"/>
        <s:State name="refreshing"/>
    </s:states>

    <s:HGroup width="100%" horizontalAlign="right"
              verticalAlign.refreshing="middle"
              verticalAlign.start="middle">
        <s:SWFLoader includeIn="refreshing" width="32" height="32"
                     source="@Embed('../assets/loaders/green-spinner.swf')"/>
        <s:Spacer width="100%"/>
        <mx:Button label="Refresh" click="refresh()" fontWeight="bold"
                   icon="@Embed('../assets/icons/reload_page.png')" paddingBottom="6" paddingLeft="12"
                   paddingRight="12" paddingTop="6"
                   enabled.refreshing="false"/>
    </s:HGroup>

    <mx:HDividedBox width="100%" height="100%">
        <s:VGroup height="100%">
            <s:Panel width="100%" height="100%" dropShadowVisible="false" title="Existing PHP Models">
                <s:layout>
                    <s:VerticalLayout paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8"/>
                </s:layout>

                <s:List id="modelsList" width="100%" height="100%" allowMultipleSelection="true"
                        borderColor="#D9D9D9" change="modelSelectionHandler(event)" useVirtualLayout="false"
                        itemRenderer="renderers.QuickDiffListItemRenderer" labelField="name">
                </s:List>
            </s:Panel>

            <s:Panel width="100%" dropShadowVisible="false" title="Code Generation" height="{optionsPanel.height}">
                <s:layout>
                    <s:VerticalLayout gap="4" paddingBottom="8" paddingLeft="8" paddingRight="8"
                                      paddingTop="8"/>
                </s:layout>

                <s:HGroup width="100%" gap="15">
                    <s:Image source="@Embed('../assets/icons/application-x-php.png')"/>
                    <s:CheckBox id="phpModelsCheck" width="90" label="PHP Models"/>
                    <s:CheckBox id="phpServicesCheck" label="PHP Services"/>
                </s:HGroup>

                <s:HGroup width="100%" verticalAlign="middle" gap="0">
                    <s:Line width="100%">
                        <s:stroke>
                            <s:SolidColorStroke color="#BBBBBB" alpha="0.3"/>
                        </s:stroke>
                    </s:Line>
                </s:HGroup>

                <s:HGroup width="100%" gap="15">
                    <s:Image source="@Embed('../assets/icons/flash.png')"/>
                    <s:CheckBox id="as3ModelsCheck" width="90" label="AS3 Models"/>
                    <s:CheckBox id="as3ServicesCheck" label="AS3 Services"/>
                </s:HGroup>

                <s:HGroup width="100%" verticalAlign="middle" gap="0">
                    <s:Line width="100%">
                        <s:stroke>
                            <s:SolidColorStroke color="#BBBBBB" alpha="0.3"/>
                        </s:stroke>
                    </s:Line>
                </s:HGroup>

                <s:HGroup width="100%" gap="15">
                    <s:Image source="@Embed('../assets/icons/file_new.png')"/>
                    <s:CheckBox id="bootstrapCheck" width="90" label="Bootstrap"/>
                </s:HGroup>

                <s:Spacer height="100%"/>

                <mx:Button id="generateBtn" width="100%" label="Generate" chromeColor="#0E65A8"
                           click="generate(phpModelsCheck.selected, phpServicesCheck.selected, as3ModelsCheck.selected,
                                            as3ServicesCheck.selected, bootstrapCheck.selected)"
                           fontWeight="bold" icon="@Embed('../assets/icons/visualization.png')"
                           paddingBottom="6" paddingLeft="12" paddingRight="12" paddingTop="6"/>
                <mx:Button includeIn="start" width="100%" label="Regenerate database tables"
                           chromeColor="#44A80E" click="refresh()" fontWeight="bold"
                           icon="@Embed('../assets/icons/revert.png')" paddingBottom="6"
                           paddingLeft="12" paddingRight="12" paddingTop="6"/>
            </s:Panel>
        </s:VGroup>

        <s:VGroup width="100%" height="100%">
            <s:Panel width="100%" height="100%" dropShadowVisible="false" title="Information">
                <s:layout>
                    <s:VerticalLayout paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8"/>
                </s:layout>

                <components:ModelDefinitionView id="modelDefinitionsView" width="100%" height="100%"/>
            </s:Panel>

            <s:Panel id="optionsPanel" width="100%" dropShadowVisible="false"
                     title="ActionScript Code Generation Options"
                     height.refreshing="240">
                <s:layout>
                    <s:HorizontalLayout gap="0"/>
                </s:layout>

                <s:VGroup width="100%" height="100%" paddingBottom="8" paddingLeft="8"
                          paddingRight="8" paddingTop="8">
                    <s:Form width="100%" height="100%">
                        <s:layout>
                            <s:FormLayout gap="0" paddingLeft="-16" paddingRight="-16" paddingBottom="-16"
                                          paddingTop="-16"/>
                        </s:layout>

                        <components:ExtendedFormItem width="100%" label=" Package">
                            <s:VGroup width="100%" verticalAlign="middle" horizontalAlign="right">
                                <s:TextArea id="packageTxt" width="100%" prompt="org.aerialframework"
                                            change="refreshConfigOptions()" restrict="[a-zA-Z0-9\.\_]"
                                            heightInLines="2"/>
                                <s:CheckBox id="bindPackage" label="Bind" selected="true"/>
                            </s:VGroup>
                        </components:ExtendedFormItem>
                        <components:ExtendedFormItem width="100%" label="Bootstrap Folder">
                            <s:TextArea id="bootstrapTxt" width="100%"
                                        change="refreshConfigOptions()" heightInLines="2"/>
                        </components:ExtendedFormItem>
                    </s:Form>

                    <s:Spacer height="100%"/>

                    <mx:Button width="100%" label="Save Options" chromeColor="#0E65A8" click="saveConfigOptions()"
                               fontWeight="bold" icon="@Embed('../assets/icons/visualization.png')"
                               paddingBottom="6" paddingLeft="12" paddingRight="12" paddingTop="6"/>
                </s:VGroup>

                <s:Form width="100%" height="100%">
                    <s:layout>
                        <s:FormLayout gap="0" paddingLeft="-8" paddingRight="-8" paddingBottom="-8" paddingTop="-8"/>
                    </s:layout>

                    <components:ExtendedFormItem width="100%" label="Models Folder">
                        <s:TextArea id="modelsTxt" width="100%" change="refreshConfigOptions()" heightInLines="2"/>
                    </components:ExtendedFormItem>
                    <components:ExtendedFormItem width="100%" label="Services Folder">
                        <s:TextArea id="servicesTxt" width="100%" change="refreshConfigOptions()" heightInLines="2"/>
                    </components:ExtendedFormItem>
                    <components:ExtendedFormItem width="100%" label="Models Suffix">
                        <s:TextInput id="voSuffixTxt" width="100%" prompt="VO" change="refreshConfigOptions()"/>
                    </components:ExtendedFormItem>
                    <components:ExtendedFormItem width="100%" label="Services Suffix">
                        <s:TextInput id="serviceSuffixTxt" width="100%" prompt="Service"
                                     change="refreshConfigOptions()"/>
                    </components:ExtendedFormItem>
                </s:Form>
            </s:Panel>
        </s:VGroup>
    </mx:HDividedBox>

    <fx:Script>
		<![CDATA[
        import controllers.GenerationController;
        import controllers.NavigationController;
        import controllers.ProjectController;

        import models.FieldDefinition;
        import models.GenerationOptions;
        import models.ModelDefinition;

        import mx.collections.ArrayList;
        import mx.controls.Alert;
        import mx.messaging.messages.RemotingMessage;
        import mx.rpc.Responder;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.utils.ObjectUtil;

        import org.aerialframework.rpc.message.AerialErrorMessage;

        import spark.events.IndexChangeEvent;

        private var message:AerialErrorMessage;

        private var serverOK:Boolean;

        private var projectController:ProjectController;
        private var projectPreferences:Object;

        private function init():void
        {
            projectController = ProjectController.instance;
            projectPreferences = projectController.getPreferences();

            NavigationController.instance.navigationChange.add(navigationChangeHandler);

            loadConfiguration();
        }

        private function loadConfiguration():void
        {
            var serverURL:String = projectController.getConfigNode("options/server-url", projectController.getConfiguration());
            if(!serverURL)
            {
                fireInvalidServerURLError();
                return;
            }

            configurationService.endpoint = serverURL;

            setConfigOptionPrompts();

            refresh();
        }

        private function navigationChangeHandler(page:String):void
        {
            if(page == NavigationController.CODE_GEN)
                init();
        }

        private function fireInvalidServerURLError():void
        {
            Alert.show("Please ensure that you have entered a valid value for 'server-url' in your config.xml file\n" +
                    ProjectController.instance.selectedProject.configFile.nativePath + "\n\nIf your config file is placed outside of the " +
                    "project root, please move the project.aerial file to the same directory as your config/ folder.",
                    "Error - Cannot retrieve data from server", 4, null, function():void
                    {
                        NavigationController.instance.navigationChange.dispatch(NavigationController.PROJECTS);
                    });
        }

        private function refresh():void
        {
            configurationService.getOperation("getDefinitionsFromYAML")
                    .send(getPackage() + ".vo")
                    .addResponder(new mx.rpc.Responder(getModelsHandler, fault));

            clear();

            this.currentState = "refreshing";
        }

        private function clear():void
        {
            modelsList.dataProvider = new ArrayList();
            modelDefinitionsView.definitions = new ArrayList();
        }

        private function generate(phpModels:Boolean, phpServices:Boolean, as3Models:Boolean, as3Services:Boolean, bootstrap:Boolean):void
        {
            var base:File = null;
            if(!base)
            {
                Alert.show("Could not verify the project base path", "Error");
                return;
            }

            var options:GenerationOptions = new GenerationOptions();
            options.basePath = base;

            options.generateBootstrap = bootstrap;
            options.generateAS3Models = as3Models;
            options.generateAS3Services = as3Services;
            options.generatePHPModels = phpModels;
            options.generatePHPServices = phpServices;

            options.selectedModels = modelsList.selectedItems;

            options.packageString = getPackage();

            var phpModelsPath:String = projectController.getConfigNode("paths/php-models", projectPreferences);
            var phpBaseModelsPath:String = projectController.getConfigNode("paths/php-models", projectPreferences) + File.separator + "base";
            var phpServicesPath:String = projectController.getConfigNode("paths/php-services", projectPreferences);

            if(bootstrap || as3Services)
                options.bootstrapPath = validatePath(getBootstrapPath(), base);

            if(as3Models || as3Services)
                options.as3ModelsPath = validatePath(getModelFolder(), base);

            if(as3Services)
                options.as3ServicesPath = validatePath(getServiceFolder(), base);

            if(phpModels || as3Models || as3Services)
            {
                options.phpModelsPath = validatePath(phpModelsPath, base);
                options.phpBaseModelsPath = validatePath(phpBaseModelsPath, base);
            }

            if(phpServices)
                options.phpServicesPath = validatePath(phpServicesPath, base);

            options.voSuffix = getVOSuffix();
            options.serviceSuffix = getServiceSuffix();

            if(bootstrap && (!options.bootstrapPath || !options.bootstrapPath.exists))
            {
                Alert.show("Cannot use the path\n" + getBootstrapPath() + "\nfor the Aerial bootstrapper", "Error");
                return;
            }

            if(as3Models && (!options.as3ModelsPath || !options.as3ModelsPath.exists))
            {
                Alert.show("Cannot use the path\n" + getModelFolder() + "\nfor the ActionScript models", "Error");
                return;
            }

            if(as3Services && (!options.as3ServicesPath || !options.as3ServicesPath.exists))
            {
                Alert.show("Cannot use the path\n" + getServiceFolder() + "\nfor the ActionScript services", "Error");
                return;
            }

            if(phpModels && ((!options.phpModelsPath || !options.phpModelsPath.exists) ||
                    (!options.phpBaseModelsPath || !options.phpBaseModelsPath.exists)))
            {
                Alert.show("Cannot use the path\n" + phpModelsPath + "\nfor the PHP models", "Error");
                return;
            }

            if(phpServices && (!options.phpServicesPath || !options.phpServicesPath.exists))
            {
                Alert.show("Cannot use the path\n" + phpServicesPath + "\nfor the PHP services", "Error");
                return;
            }

            GenerationController.generate(options);

            refresh();
        }

        private function validatePath(path:String, base:File = null, showError:Boolean = true):File
        {
            try
            {
                var file:File = new File(path);
                if(!file.exists)
                {
                    file.createDirectory();
                    return file;
                }
                else
                    return file;
            }
            catch(e:Error)
            {
                if(!base && showError)
                {
                    Alert.show("Cannot create path\n" + path, "Error");
                    return null;
                }
                else
                    return validatePath(base.nativePath + File.separator + path, null, showError);
            }

            return file;
        }

        private function setConfigOptionPrompts():void
        {
            packageTxt.text = "";
            bootstrapTxt.text = "";
            modelsTxt.text = "";
            servicesTxt.text = "";
            voSuffixTxt.text = "";
            serviceSuffixTxt.text = "";

            var packageStr:String = projectController.getConfigNode("code-generation/package", projectPreferences);
            var bootstrapFolder:String = projectController.getConfigNode("code-generation/bootstrap", projectPreferences);
            var modelsFolder:String = projectController.getConfigNode("code-generation/as3-models", projectPreferences);
            var servicesFolder:String = projectController.getConfigNode("code-generation/as3-services", projectPreferences);
            var voSuffix:String = projectController.getConfigNode("code-generation/vo-suffix", projectPreferences);
            var serviceSuffix:String = projectController.getConfigNode("code-generation/service-suffix", projectPreferences);

            bootstrapFolder = bootstrapFolder.replace("[package]", packageStr.replace(/\./gi, "/"));
            modelsFolder = modelsFolder.replace("[package]", packageStr.replace(/\./gi, "/"));
            servicesFolder = servicesFolder.replace("[package]", packageStr.replace(/\./gi, "/"));

            packageTxt.prompt = packageStr;
            bootstrapTxt.prompt = bootstrapFolder;
            modelsTxt.prompt = modelsFolder;
            servicesTxt.prompt = servicesFolder;
            voSuffixTxt.prompt = voSuffix;
            serviceSuffixTxt.prompt = serviceSuffix;
        }

        private function refreshConfigOptions():void
        {
            var packageStr:String = packageTxt.text;
            var bootstrapFolder:String = bootstrapTxt.text;
            var modelsFolder:String = modelsTxt.text;
            var servicesFolder:String = servicesTxt.text;
            var voSuffix:String = voSuffixTxt.text;
            var serviceSuffix:String = serviceSuffixTxt.text;

            var packageDefault:String = projectController.getConfigNode("code-generation/package", projectPreferences);
            var bootstrapDefault:String = projectController.getConfigNode("code-generation/bootstrap", projectPreferences);
            var modelsFolderDefault:String = projectController.getConfigNode("code-generation/as3-models", projectPreferences);
            var servicesFolderDefault:String = projectController.getConfigNode("code-generation/as3-services", projectPreferences);
            var voSuffixDefault:String = projectController.getConfigNode("code-generation/vo-suffix", projectPreferences);
            var serviceSuffixDefault:String = projectController.getConfigNode("code-generation/service-suffix", projectPreferences);

            if(bindPackage.selected && bootstrapFolder != bootstrapDefault && packageStr != "")
                bootstrapTxt.prompt = "src_flex/" + packageStr.replace(/\./gi, "/") + "/bootstrap/";	    // default

            if(bindPackage.selected && modelsFolder != modelsFolderDefault && packageStr != "")
                modelsTxt.prompt = "src_flex/" + packageStr.replace(/\./gi, "/") + "/vo/";				// default

            if(bindPackage.selected && servicesFolder != servicesFolderDefault && packageStr != "")
                servicesTxt.prompt = "src_flex/" + packageStr.replace(/\./gi, "/") + "/services/";		// default

            if(voSuffix != voSuffixDefault)
                voSuffixTxt.prompt = "VO";	    														// default

            if(serviceSuffix != serviceSuffixDefault)
                serviceSuffixTxt.prompt = "Service";													// default
        }

        private function getPackage():String
        {
            return packageTxt.text == null || packageTxt.text == "" ? packageTxt.prompt : packageTxt.text;
        }

        private function getBootstrapPath():String
        {
            return bootstrapTxt.text == null || bootstrapTxt.text == "" ? bootstrapTxt.prompt : bootstrapTxt.text;
        }

        private function getModelFolder():String
        {
            return modelsTxt.text == null || modelsTxt.text == "" ? modelsTxt.prompt : modelsTxt.text;
        }

        private function getServiceFolder():String
        {
            return servicesTxt.text == null || servicesTxt.text == "" ? servicesTxt.prompt : servicesTxt.text;
        }

        private function getVOSuffix():String
        {
            return voSuffixTxt.text == null || voSuffixTxt.text == "" ? voSuffixTxt.prompt : voSuffixTxt.text;
        }

        private function getServiceSuffix():String
        {
            return serviceSuffixTxt.text == null || serviceSuffixTxt.text == "" ? serviceSuffixTxt.prompt : serviceSuffixTxt.text;
        }

        private function saveConfigOptions():void
        {
            var packageStr:String = getPackage();
            var bootstrapFile:String = getBootstrapPath();
            var modelsFolder:String = getModelFolder();
            var servicesFolder:String = getServiceFolder();
            var voSuffix:String = getVOSuffix();
            var serviceSuffix:String = getServiceSuffix();

            var paths:Array = ["code-generation/package", "code-generation/bootstrap", "code-generation/as3-models",
                "code-generation/as3-services", "code-generation/vo-suffix", "code-generation/service-suffix"];

            var data:Array = [packageStr, bootstrapFile, modelsFolder, servicesFolder, voSuffix, serviceSuffix];

            throw new Error("Implement saving!");
            //AerialPreferences.setNodes(paths, data);
            Alert.show("Configuration options saved.", "Notice");

            if(serverOK) refresh();
        }

        private function getModelsHandler(event:ResultEvent):void
        {
            serverOK = true;
            this.currentState = null;

            processModelDefinitions(event.result as Object);
        }

        private function modelSelectionHandler(event:IndexChangeEvent):void
        {
            if(!modelsList.selectedItem && modelsList.selectedItems.length == 0)
            {
                modelDefinitionsView.definitions = new ArrayList();
                return;
            }

            if(modelsList.selectedItems.length > 1)
            {
                modelDefinitionsView.displayMode = ModelDefinitionView.MULTIPLE;

                // modelsList.selectedItems is a Vector, and ArrayList needs an Array
                var selectedModels:Array = vectorToArray(modelsList.selectedItems);

                modelDefinitionsView.definitions = new ArrayList(selectedModels);
            }
            else
            {
                modelDefinitionsView.displayMode = ModelDefinitionView.SINGLE;

                modelDefinitionsView.definitions = new ArrayList(modelsList.selectedItem.fields);
            }
        }

        /**
         * Thanks Jack!
         * @see http://jacksondunstan.com/articles/192
         */
        private function vectorToArray(v:Object):Array
        {
            var len:int = v.length;
            var ret:Array = new Array(len);
            for(var i:int = 0; i < len; ++i)
            {
                ret[i] = v[i];
            }
            return ret;
        }

        private function processModelDefinitions(definitions:Object):void
        {
            if(!definitions)
            {
                Alert.show("Definitions could not be loaded", "Error");
                return;
            }

            // sort the models
            var modelNames:Array = [];
            for(var modelName:String in definitions)
                modelNames.push(modelName);

            var sortedModelNames:Array = modelNames.sort(Array.CASEINSENSITIVE);

            var voSuffix:String = getVOSuffix();
            var serviceSuffix:String = getServiceSuffix();

            var modelDefinitions:ArrayList = new ArrayList();
            for each(var model:String in sortedModelNames)
            {
                if(!definitions[model].hasOwnProperty("fields") || !definitions[model].hasOwnProperty("files"))
                {
                    Alert.show("Definitions could not be loaded", "Error");
                    return;
                }
                else
                {
                    var definition:ModelDefinition = new ModelDefinition();
                    var base:File = null;

                    definition.modelName = model;
                    definition.fields = buildDefinitions(definitions[model].fields);

                    var files:Object = definitions[model].files;

                    definition.phpBaseModel.path = getPath(files["baseClass"].path, base);
                    definition.phpBaseModel.content = files["baseClass"].file.toString();

                    definition.phpModel.path = getPath(files["topLevelClass"].path, base);
                    definition.phpModel.content = files["topLevelClass"].file.toString();

                    // load php services path from config
                    var phpServicesFolder:String = projectController.getConfigNode("paths/php-services", projectPreferences);
                    definition.phpService.path = getPath(phpServicesFolder + File.separator + definition.modelName + serviceSuffix + ".php", base);
                    trace(definition.phpService.path.nativePath);

                    definition.as3Model.path = getPath(getModelFolder() + File.separator + definition.modelName + voSuffix + ".as", base);
                    definition.as3Service.path = getPath(getServiceFolder() + File.separator + definition.modelName + serviceSuffix + ".as", base);

                    modelDefinitions.addItem(definition);
                }
            }

            modelsList.dataProvider = modelDefinitions;
        }

        /**
         * Tries to resolve relative and absolute paths
         *
         * @param path
         * @param base
         * @return
         */
        private function getPath(path:String, base:File = null):File
        {
            try
            {
                var file:File = new File(path);
                if(file.exists)
                    return file;
            }
            catch(e:Error)
            {
                if(base)
                    return getPath(base.nativePath + File.separator + path);
            }

            return file;
        }

        private function buildDefinitions(descriptors:Array):Array
        {
            var definitions:Array = [];
            for each(var descriptor:Object in descriptors)
            {
                var definition:FieldDefinition = new FieldDefinition();
                definition.name = descriptor.hasOwnProperty("name") ? descriptor.name : "";
                definition.type = descriptor.hasOwnProperty("type") ? descriptor.type : "";
                definition.length = descriptor.hasOwnProperty("length") ? descriptor.length : -1;
                definition.isRelation = descriptor.hasOwnProperty("relation") ? descriptor.relation : false;
                definition.many = descriptor.hasOwnProperty("many") ? descriptor.many : false;

                definitions.push(definition);
            }

            return definitions;
        }

        protected function fault(event:FaultEvent):void
        {
            serverOK = false;

            var message:RemotingMessage = event.token.message as RemotingMessage;
            if(message.operation == "getDefinitionsFromYAML" && !configurationService.endpoint)
            {
                fireInvalidServerURLError();
            }
            else
            {
                Alert.show("An error occurred while attempting to load model definitions. Please open server.php for " +
                        "more detailed error messages.\n\nError:\n" + event.fault.faultString, "Error");
            }

            this.currentState = "start";
        }
        ]]>
	</fx:Script>

    <fx:Declarations>
        <s:RemoteObject id="configurationService" source="Configuration" destination="amfphp"
                        fault="fault(event)"/>
    </fx:Declarations>
</s:VGroup>