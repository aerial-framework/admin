<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" show="init()" verticalScrollPolicy="off"
		 implements="interfaces.IRefreshable">
	
	<mx:Script>
		<![CDATA[
			import components.config.ArrayItem;
			import components.config.BooleanItem;
			import components.config.ConfigItem;
			import components.config.DatabaseSelector;
			import components.config.FolderItem;
			import components.config.IConfigItem;
			import components.config.PackageItem;
			import components.config.PathItem;
			import components.config.PermissionsItem;
			import components.config.StringItem;
			import components.config.URLItem;
			
			import controllers.ApplicationController;
			import controllers.FileController;
			
			import interfaces.IRefreshable;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.controls.HRule;
			import mx.controls.RadioButtonGroup;
			import mx.core.Application;
			import mx.core.UIComponent;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import utils.ConfigurationNode;
			import utils.ConfigurationUtil;
			import utils.PermissionsUtil;
			
			use namespace mx_internal;
			
			private var panels:Array = [];
			private var newXML:XML = new XML();
			
			public function init():void
			{
				if(!ApplicationController.instance.projectDirectory)
				{
					Alert.show("Please select a project first", "Notification",4, null,
						function(event:CloseEvent)
						{
							ApplicationController.instance.showPage.dispatch(ApplicationController.OPEN_PROJECT);
						});
					return;
				}
				
				panels.push({section:"options", panel:optionsPanel});
				panels.push({section:"paths", panel:pathsPanel});
				panels.push({section:"code-generation", panel:codeGenPanel});
				panels.push({section:"database", panel:databasePanel});
				
				ApplicationController.instance.configMode = ConfigurationUtil.SIMPLE;
				setMode(ConfigurationUtil.SIMPLE);
				
				modeToggle.selectedIndex = 0;
				
				clearPanels();
				
				var nodes:Object = parseConfig(useAltCheck.selected);
				createEditors(nodes);
			}
			
			private function clearPanels():void
			{
				for each(var item:Object in panels)
					Panel(item.panel).removeAllChildren();
			}
			
			private function createEditors(nodes:Object):void
			{				
				// loop through all configuration sections
				for(var section:String in nodes)
				{
					// find the panel into which each child should be added
					var panel:Panel;
					for each(var obj:Object in panels)
					if(obj.section == section)
					{
						panel = obj.panel;
						break;
					}
					
					var settingGroup:ConfigurationNode = nodes[section] as ConfigurationNode;
					if(!settingGroup)
						continue;
					
					// simple settings do not have children
					if(!settingGroup.children || settingGroup.children.length == 0)
						createField(settingGroup, panel);
					else
					{
						var group:RadioButtonGroup = new RadioButtonGroup();
						
						// regular settings have simple children
						for(var i:uint = 0; i < settingGroup.children.length; i++)
						{
							// if the child is a ConfigurationNode
							var node:ConfigurationNode = settingGroup.children[i] as ConfigurationNode;
							
							if(node)
								createField(node, panel);
							else
							{
								// if the node is not a ConfigurationNode, it's probably a more complex array
								// involved in the database settings section
								
								if(settingGroup.children[i].database == undefined)
									continue;
								
								var selector:DatabaseSelector = new DatabaseSelector();
								selector.databaseNode = settingGroup.raw;
								selector.group = group;
								
								var nodeName:String = settingGroup.children[i]["database"].nodeName;
								selector.nodeName = nodeName;
								selector.selected = settingGroup.nodeToUse == nodeName;
								panel.addChild(selector);
								
								for(var setting:String in settingGroup.children[i])
								{
									var subNode:ConfigurationNode = settingGroup.children[i][setting] as ConfigurationNode;
									if(subNode)
										createField(subNode, panel);
								}
								
								if(i < settingGroup.children.length - 1)
								{
									var rule:HRule = new HRule();
									rule.percentWidth = 100;
									panel.addChild(rule);
								}								
							}
						}
					}
				}
			}
			
			private function parseConfig(useAlt:Boolean=false):Object
			{
				var descriptorFile:File = File.applicationDirectory.resolvePath('config-descriptor.xml');
				var configFile:File = ApplicationController.instance.configFile;
				var altConfigFile:File = ApplicationController.instance.configAltFile;
				
				XML.ignoreComments = false;
				
				var descriptorXML:XML;
				var configXML:XML;
				var altConfigXML:XML;
				
				var stream:FileStream = new FileStream();
				stream.open(descriptorFile, FileMode.READ);
				descriptorXML = XML(stream.readUTFBytes(stream.bytesAvailable));
				stream.close();
				
				stream.open(ApplicationController.instance.configFile, FileMode.READ);
				configXML = XML(stream.readUTFBytes(stream.bytesAvailable));
				stream.close();
				
				if(altConfigFile.exists)
				{
					stream.open(altConfigFile, FileMode.READ);
					altConfigXML = XML(stream.readUTFBytes(stream.bytesAvailable));
					stream.close();
				}
				else
					altConfigXML = <config/>;
				
				/* var hybrid:XML = configXML;
				hybrid.replace("debug-mode", altConfigXML["debug-mode"]);
				hybrid.replace("database", altConfigXML["database"]);
				
				trace(hybrid.toXMLString()); */
				
				var nodes:Object = {};
				
				var parser:ConfigurationUtil = ConfigurationUtil.instance;
				parser.configXML = configXML;
				parser.altConfigXML = altConfigXML;
				parser.descriptorXML = descriptorXML;
				
				nodes["paths"] = parser.getRegularNode("paths", "Paths", useAlt);
				nodes["code-generation"] = parser.getRegularNode("code-generation", "Code Generation", useAlt);
				nodes["options"] = parser.getRegularNode("options", "Options", useAlt);
				nodes["database"] = parser.getDatabaseNodes(useAlt);
				
				return nodes;
			}
			
			private function createField(node:ConfigurationNode, panel:Panel):void
			{
				var editorClass:Class = getEditor(node);
				var editor:ConfigItem = new editorClass();
				editor.node = node;
				editor.percentWidth = 100;
				
				panel.addChild(editor);
			}
			
			private function setState(state:String):void
			{
				switch(state)
				{
					case 'hybrid':
						ApplicationController.instance.configViewChanged.dispatch(ConfigurationUtil.HYBRID, false);
						break;
					case 'regular':
						var nodes:Object = parseConfig(useAltCheck.selected);
						createEditors(nodes);
						ApplicationController.instance.configViewChanged.dispatch(ConfigurationUtil.REGULAR, true);
						break;
					case 'alternative':
						clearPanels();
						var nodes:Object = parseConfig(true);
						createEditors(nodes);
						ApplicationController.instance.configViewChanged.dispatch(ConfigurationUtil.ALTERNATIVE, true);
						break;
				}
			}
			
			private function getEditor(node:ConfigurationNode):Class
			{
				switch(node.type)
				{
					case "path":
						return PathItem;
						break;
					case "string":
						return StringItem;
						break;
					case "array":
						return ArrayItem;
						break;
					case "url":
						return URLItem;
						break;
					case "package":
					case "class":
						return PackageItem;
						break;
					case "folder_name":
						return FolderItem;
						break;
					case "boolean":
						return BooleanItem;
						break;
					case "permissions":
						return PermissionsItem;
						break;
					default:
						throw new Error("No editor type found for [" + node.type + "].");
						break;
				}
			}			

			private function setMode(mode:String):void
			{
				ApplicationController.instance.configMode = mode;
			}

			private function saveConfig():void
			{
				newXML = ConfigurationUtil.instance.configXML;
				
				for each(var item:Object in panels)
					for each(var child:UIComponent in Panel(item.panel).getChildren())
						if(child is IConfigItem && child.visible && child.includeInLayout)
						{
							if(child is ConfigItem)
							{
								var config:ConfigItem = child as ConfigItem;
								
								/* trace("<<<<<<" + config.node.name + ">>>>>>>");
								trace(config.node.raw.toXMLString());
								trace(config.node.parentRaw.toXMLString()); */
								
								var isDatabaseNode:Boolean = config.node.nodeName != null;
								
								if(isDatabaseNode)
								{
									var node:XML = XML(newXML["database"][config.node.nodeName][0]);
									
									//XML(config.node.raw.parent()).setName(config
									config.node.raw.setChildren(config.getValue());
									node.replace(config.node.name, config.node.raw);
								}
								else
								{
									var node:XML = XML(newXML[config.node.parentRaw.name().toString()][0]);
									config.node.raw.setChildren(config.getValue());
									node.replace(config.node.name, config.node.raw);
								}
							}
							else if(child is DatabaseSelector)
							{
								var selector:DatabaseSelector = child as DatabaseSelector;
								
								if(Boolean(selector.getValue()))
									XML(newXML["database"][0]).@['use'] = selector.nodeName;
							}
							
							/* trace("[" + item.section + "]\n" + child + "\n"
								+ (child as IConfigItem).getValue() + "\n-----------------------"); */
						}
						
				Alert.show("Would you like to make a backup of the original config.xml " +
								"file before it is overwritten with new values?", "Confirmation", Alert.YES|Alert.NO|Alert.CANCEL, null,
								backupSelectionHandler);
			}
			
			private function backupSelectionHandler(event:CloseEvent):void
			{
				var configFile:File = ApplicationController.instance.configFile;
				
				if(event.detail == Alert.YES)
				{
					var backupFile:File = ApplicationController.instance.configDirectory.resolvePath("config.backup.zip");
					
					FileController.instance.backup(configFile, backupFile);
				}
				
				if(event.detail != Alert.CANCEL)
				{
					FileController.instance.write(configFile, newXML.toXMLString());
					Alert.show("Configuration file saved!", "Notification");
				}
			}
		]]>
	</mx:Script>
	
	<mx:HBox width="100%" verticalAlign="middle" styleName="myTitlePanel">
		<mx:ToggleButtonBar id="modeToggle" width="150" itemClick="setMode(event.item.data)" selectedIndex="0">
			<mx:dataProvider>
				<mx:Array>
					<mx:Object label="Simple" data="{ConfigurationUtil.SIMPLE}"/>
					<mx:Object label="Advanced" data="{ConfigurationUtil.ADVANCED}"/>
				</mx:Array>
			</mx:dataProvider>
		</mx:ToggleButtonBar>
		
		<mx:CheckBox id="useAltCheck" label="Show overriden values in config-alt.xml" selected="true"
					 change="init()"/>
		
		<mx:Spacer width="100%"/>
		
		<mx:Button label="Save Configuration" click="saveConfig()" height="35"
				   icon="@Embed(source='../assets/icons/dusseldorf/upcoming-work-16.png')"/>
		
		<!--<mx:Spacer width="100%"/>-->
		
		<!--<mx:ToggleButtonBar width="150" itemClick="setState(event.item.data)" selectedIndex="0" visible="false">
			<mx:dataProvider>
				<mx:Array>-->
					<!--<mx:Object label="Hybrid" data="{ConfigurationUtil.HYBRID}"/>-->
					<!--<mx:Object label="Regular" data="{ConfigurationUtil.REGULAR}"/>-->
					<!--<mx:Object label="Alternative" data="{ConfigurationUtil.ALTERNATIVE}"/>-->
				<!--</mx:Array>
			</mx:dataProvider>
		</mx:ToggleButtonBar>-->
	</mx:HBox>
	
	<mx:HRule width="100%"/>
	
	<mx:Canvas id="scrollerPanel" width="100%" height="100%" horizontalScrollPolicy="off" visible="false"
			   creationComplete="event.currentTarget.visible = true" creationCompleteEffect="Fade">
		<mx:Form id="form" labelWidth="200" left="0" right="8" paddingLeft="0" paddingTop="0" paddingBottom="0">
			<mx:Panel id="optionsPanel" title="SETTINGS" width="100%" styleName="panelStyle"/>
			<mx:Panel id="databasePanel" title="DATABASE SETTINGS" width="100%" styleName="panelStyle"/>
			<mx:Panel id="pathsPanel" title="PATH SETTINGS" width="100%" styleName="panelStyle"/>
			<mx:Panel id="codeGenPanel" title="CODE GENERATION SETTINGS" width="100%" styleName="panelStyle"/>
		</mx:Form>
	</mx:Canvas>
</mx:VBox>