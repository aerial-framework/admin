<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" creationComplete="parseConfig()">
	
	<mx:Metadata>
		[Event(name="back",type="flash.events.Event")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import utils.ConfigurationNode;
			
			private var descriptorXML:XML;
			private var configXML:XML;
			
			private var warnings:Array = [];
			private var errors:Array = [];

			private function parseConfig():void
			{
				var descriptorFile:File = File.applicationDirectory.resolvePath('config-descriptor.xml');
				var configFile:File = new File("C:/UniServer/www/open-source/aerial-test/src_php/lib/config/config.xml");
				
				var stream:FileStream = new FileStream();
				stream.open(descriptorFile, FileMode.READ);
				descriptorXML = XML(stream.readUTFBytes(stream.bytesAvailable));
				stream.close();
				
				stream.open(configFile, FileMode.READ);
				configXML = XML(stream.readUTFBytes(stream.bytesAvailable));
				stream.close();
				
				var nodes:Object = {};
				
				nodes["debug-mode"] = getSimpleNode("debug-mode", "Debug Mode");
				nodes["paths"] = getRegularNode("paths", "Paths");
				nodes["code-generation"] = getRegularNode("code-generation", "Code Generation");
				nodes["options"] = getRegularNode("options", "Options");
				nodes["server-url"] = getSimpleNode("server-url", "Server URL");
				nodes["database"] = getDatabaseNodes();
				
				trace("WARNINGS:\n" + warnings.join("\n"));
				trace("ERRORS:\n" + errors.join("\n"));
				trace(ObjectUtil.toString(nodes));
			}
			
			private function getSimpleNode(parentNodeName:String, parentNodeLabel:String):ConfigurationNode
			{
				var cNode:XML = XML(configXML[parentNodeName][0]);
				var dNode:XML = XML(descriptorXML[parentNodeName][0]);
				
				if(!cNode.name() || !dNode.name())
				{
					warnings.push(parentNodeLabel + " node is missing in " + (!cNode.name() ? "configuration file " : "configuration descriptor"));
					return null;
				}
				
				var value:* = cNode.text().toString();
				if(value == "true" || value == "false")
					value = value == "true";
				
				var node:ConfigurationNode = new ConfigurationNode();
				node.type = dNode.@type.toString();
				node.label = dNode.@label.toString();
				node.category = dNode.@category.toString();
				node.defaultValue = dNode.@['default'].toString();
				node.value = value;
				node.description = dNode.text().toString();
				
				return node;
			}
			
			private function getRegularNode(parentNodeName:String, parentNodeLabel:String):Object
			{
				var cNode:XML = XML(configXML[parentNodeName][0]);
				var dNode:XML = XML(descriptorXML[parentNodeName][0]);
				
				if(!cNode.name() || !dNode.name())
				{
					errors.push(parentNodeLabel + " node is missing in " + (!cNode.name() ? "configuration file " : "configuration descriptor"));
					return null;
				}
				
				var parentNode:ConfigurationNode = new ConfigurationNode();
				parentNode.absolute = dNode.@absolute.toString() == "true";
				parentNode.type = dNode.@type.toString();
				parentNode.label = dNode.@label.toString();
				parentNode.category = dNode.@category.toString();
				parentNode.defaultValue = dNode.@['default'].toString();
				parentNode.value = cNode.text().toString();
				parentNode.description = dNode.text().toString();
				
				// find the children node names that should ideally be in the configuration file
				var idealChildren:Array = [];
				for each(var child:XML in dNode.children())
				{
					// if the child is CDATA, ignore it
					if(child.nodeKind() == "text")
						continue;
					
					idealChildren.push(child.name().toString());
				}
				
				var children:Object = {};
				
				// now check what's actually in the config file
				for each(var nodeName:String in idealChildren)
				{
					var testNode:XML = XML(cNode.child(nodeName)[0]);
					var descriptorNode:XML = XML(dNode.child(nodeName)[0]);
					
					if(testNode.name() == null)
					{
						children[nodeName] = null;
						errors.push("'" + nodeName + "' node is missing in configuration file");
						continue;
					}
					
					var node:ConfigurationNode = new ConfigurationNode();
					node.absolute = descriptorNode.@absolute.toString() == "true";
					node.type = descriptorNode.@type.toString();
					node.label = descriptorNode.@label.toString();
					node.category = descriptorNode.@category.toString();
					node.defaultValue = descriptorNode.@['default'].toString();
					node.value = testNode.text().toString();
					node.description = descriptorNode.text().toString();
					
					children[nodeName] = node;
				}
				
				parentNode.children = children;
				return parentNode;
			}
			
			private function getDatabaseNodes():Object
			{
				var cNode:XML = XML(configXML["database"][0]);
				var dNode:XML = XML(descriptorXML["database"][0]);
				
				if(!cNode.name() || !dNode.name())
				{
					errors.push("Database node is missing in " + (!cNode.name() ? "configuration file " : "configuration descriptor"));
					return null;
				}
				
				var parentNode:ConfigurationNode = new ConfigurationNode();
				parentNode.type = dNode.@type.toString();
				parentNode.label = dNode.@label.toString();
				parentNode.category = dNode.@category.toString();
				parentNode.description = dNode.text().toString();
				
				var nodeToUse:String = cNode.@['use'].toString();
				
				// create the ideal structure
				var structure:Array = [];				
				for each(var element:XML in dNode.structure.children())
					structure.push(element.name().toString());
					
				var children:Object = {};
				for each(var element:XML in cNode.children())
				{
					for each(var elementName:String in structure)
					{
						// validate the existent (or non-existent) nodes
						if(element.child(elementName)[0] == null)
						{
							errors.push("'" + elementName + "' node is missing in configuration file");
							continue;
						}
					}
					
					var subNodes:Object = {};
					for each(var subNode:XML in element.children())
					{
						var descriptorNode:XML = dNode.structure.child(subNode.name().toString())[0];
						
						var node:ConfigurationNode = new ConfigurationNode();
						node.type = descriptorNode.@type.toString();
						node.label = descriptorNode.@label.toString();
						node.category = descriptorNode.@category.toString();
						node.defaultValue = descriptorNode.@['default'].toString();
						node.value = subNode.text().toString();
						node.description = descriptorNode.text().toString();
						
						if(descriptorNode.attribute("options")[0] != null)
						{
							var options:Array = [];
							var splitOptions:Array = descriptorNode.@options.toString().split(",");
							for each(var option:String in splitOptions)
							{
								var parts:Array = option.split(":");
								options.push({label:parts[0], data:parts[1]});
							}
							
							node.options = options;
						}
						
						subNodes[subNode.name().toString()] = node;
					}
					
					children[element.name().toString()] = subNodes;
					
					if(element.name().toString() == nodeToUse)
						parentNode.nodeToUse = element.name().toString();
				}
				
				parentNode.children = children;
				return parentNode;
			}
		]]>
	</mx:Script>
	
	<mx:HBox width="100%" verticalAlign="bottom" horizontalAlign="right" id="hbox1">
		<mx:Label text="CONFIGURATION EDITOR" styleName="weekDayChooserStyle" fontWeight="bold"/>
		
		<mx:Spacer width="100%"/>
		
		<mx:Button icon="@Embed(source='../assets/icons/dusseldorf/sign-in.png')" width="45" height="45"
				   click="dispatchEvent(new Event('back'))" toolTip="Back"/>
	</mx:HBox>
</mx:VBox>