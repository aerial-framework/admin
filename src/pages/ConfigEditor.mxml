<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" creationComplete="init()" verticalScrollPolicy="off">
	
	<mx:Metadata>
		[Event(name="back",type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import components.config.BooleanItem;
			import components.config.FolderItem;
			import components.config.PathItem;
			
			import controllers.ApplicationController;
			
			import mx.binding.utils.BindingUtils;
			import mx.core.Application;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import utils.ConfigurationNode;
			import utils.ConfigurationUtil;
			import utils.PermissionsUtil;
			
			use namespace mx_internal;
			
			private function init():void
			{
				var nodes:Object = parseConfig();
				
				ApplicationController.instance.configMode = ConfigurationUtil.SIMPLE;
				
				trace(ObjectUtil.toString(PermissionsUtil.parsePermissions("0777")));
				trace(PermissionsUtil.getPermissions(PermissionsUtil.parsePermissions("0777")));
				
				/* for(var name:String in nodes)
				{
					var node:ConfigurationNode = nodes[name] as ConfigurationNode;
					trace(name + " > " + node.children + " > " + (node.category == ConfigurationParser.SIMPLE));
					
					if(!node.children)
						continue;
					
					for(var subName:String in node.children)
					{
						var subNode:ConfigurationNode = node.children[subName] as ConfigurationNode;
						if(subNode)
							trace("> " + subName + " > " + subNode.children + " > " + (subNode.category == ConfigurationParser.SIMPLE));
					}
				} */
				
				var item:BooleanItem = new BooleanItem();
				item.node = nodes["debug-mode"];
				
				importantPanel.addChild(item);
				
				for each(var pathItem:ConfigurationNode in nodes["paths"].children)
				{					
					var pItem:PathItem = new PathItem();
					pItem.percentWidth = 100;
					pItem.node = pathItem;
					
					if(pathItem.float != -1)
						pathsPanel.addChildAt(pItem, pathItem.float);
					else	
						pathsPanel.addChild(pItem);
				}
				
				for each(var codeGenItem:ConfigurationNode in nodes["code-generation"].children)
				{					
					var fItem:FolderItem = new FolderItem();
					fItem.percentWidth = 100;
					fItem.node = codeGenItem;
					
					/* if(pathItem.float != -1)
						codeGenPanel.addChildAt(pItem, codeGenItem.float);
					else	 */
						codeGenPanel.addChild(fItem);
				}
				
				for each(var optionItem:ConfigurationNode in nodes["options"].children)
				{					
					var oItem:FolderItem = new FolderItem();
					oItem.percentWidth = 100;
					oItem.node = optionItem;
					
					/* if(pathItem.float != -1)
					codeGenPanel.addChildAt(pItem, codeGenItem.float);
					else	 */
					optionsPanel.addChild(oItem);
				}
			}

			private function parseConfig():Object
			{
				var descriptorFile:File = File.applicationDirectory.resolvePath('config-descriptor.xml');
				var configFile:File = new File("C:/UniServer/www/open-source/aerial-test/src_php/lib/config/config.xml");
				
				var descriptorXML:XML;
				var configXML:XML;
				
				var stream:FileStream = new FileStream();
				stream.open(descriptorFile, FileMode.READ);
				descriptorXML = XML(stream.readUTFBytes(stream.bytesAvailable));
				stream.close();
				
				stream.open(configFile, FileMode.READ);
				configXML = XML(stream.readUTFBytes(stream.bytesAvailable));
				stream.close();
				
				var nodes:Object = {};
				
				var parser:ConfigurationUtil = ConfigurationUtil.instance;
				parser.configXML = configXML;
				parser.descriptorXML = descriptorXML;
				
				nodes["debug-mode"] = parser.getSimpleNode("debug-mode", "Debug Mode");
				nodes["paths"] = parser.getRegularNode("paths", "Paths");
				nodes["code-generation"] = parser.getRegularNode("code-generation", "Code Generation");
				nodes["options"] = parser.getRegularNode("options", "Options");
				nodes["server-url"] = parser.getSimpleNode("server-url", "Server URL");
				nodes["database"] = parser.getDatabaseNodes();
				
				return nodes;
			}
			
			

			private function modeChangeHandler(event:Event):void
			{
				ApplicationController.instance.configMode = modeGroup.selection.name;
			}
		]]>
	</mx:Script>
	
	<mx:HBox width="100%" verticalAlign="bottom" horizontalAlign="right" id="hbox1">
		<mx:Label text="CONFIGURATION EDITOR" styleName="weekDayChooserStyle" fontWeight="bold"/>
		
		<mx:Spacer width="100%"/>
		
		<mx:Button icon="@Embed(source='../assets/icons/dusseldorf/sign-in.png')" width="45" height="45"
				   click="dispatchEvent(new Event('back'))" toolTip="Back"/>
	</mx:HBox>
	
	<mx:HBox width="100%" verticalAlign="middle" horizontalAlign="center" styleName="myTitlePanel">
		<mx:RadioButton label="Simple" group="{modeGroup}" textAlign="center"
						name="{ConfigurationUtil.SIMPLE}" labelPlacement="bottom"
						creationComplete="event.currentTarget.selected = true"/>
		<mx:RadioButton label="Advanced" group="{modeGroup}" textAlign="center"
						name="{ConfigurationUtil.ADVANCED}" labelPlacement="bottom"/>
	</mx:HBox>
	
	<mx:RadioButtonGroup id="modeGroup" change="modeChangeHandler(event)"/>
	
	<mx:Canvas id="scrollerPanel" width="100%" height="100%" horizontalScrollPolicy="off" visible="false"
			   creationComplete="event.currentTarget.visible = true" creationCompleteEffect="Fade">
		<mx:Form id="form" labelWidth="200" left="8" right="8" paddingLeft="0">
			<mx:Panel id="importantPanel" title="IMPORTANT SETTINGS" width="100%" styleName="panelStyle"/>
			<mx:Panel id="pathsPanel" title="PATH SETTINGS" width="100%" styleName="panelStyle"/>
			<mx:Panel id="codeGenPanel" title="CODE GENERATION SETTINGS" width="100%" styleName="panelStyle"/>
			<mx:Panel id="optionsPanel" title="OTHER SETTINGS" width="100%" styleName="panelStyle"/>
		</mx:Form>
	</mx:Canvas>
</mx:VBox>