<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" creationComplete="init()" verticalScrollPolicy="off">
	
	<mx:Metadata>
		[Event(name="back",type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import components.DatabaseSelector;
			import components.config.ArrayItem;
			import components.config.BooleanItem;
			import components.config.ConfigItem;
			import components.config.FolderItem;
			import components.config.PackageItem;
			import components.config.PathItem;
			import components.config.PermissionsItem;
			import components.config.StringItem;
			import components.config.URLItem;
			
			import controllers.ApplicationController;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.HRule;
			import mx.core.Application;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import utils.ConfigurationNode;
			import utils.ConfigurationUtil;
			import utils.PermissionsUtil;
			
			use namespace mx_internal;
			
			private function init():void
			{
				var nodes:Object = parseConfig();
				
				ApplicationController.instance.configMode = ConfigurationUtil.SIMPLE;
				
				var panels:Array = [];
				panels.push({section:"debug-mode", panel:importantPanel});
				panels.push({section:"paths", panel:pathsPanel});
				panels.push({section:"code-generation", panel:codeGenPanel});
				panels.push({section:"options", panel:optionsPanel});
				panels.push({section:"server-url", panel:importantPanel});
				panels.push({section:"database", panel:databasePanel});
				
				// loop through all configuration sections
				for(var section:String in nodes)
				{
					// find the panel into which each child should be added
					var panel:Panel;
					for each(var obj:Object in panels)
						if(obj.section == section)
						{
							panel = obj.panel;
							break;
						}
					
					var settingGroup:ConfigurationNode = nodes[section] as ConfigurationNode;	
						
					// simple settings do not have children
					if(!settingGroup.children || settingGroup.children.length == 0)
						createField(settingGroup, panel);
					else
					{
						var group:RadioButtonGroup = new RadioButtonGroup();
						
						// regular settings have simple children
						for(var i:uint = 0; i < settingGroup.children.length; i++)
						{
							// if the child is a ConfigurationNode
							var node:ConfigurationNode = settingGroup.children[i] as ConfigurationNode;
							
							if(node)
								createField(node, panel);
							else
							{
								// if the node is not a ConfigurationNode, it's probably a more complex array
								// involved in the database settings section
								
								if(settingGroup.children[i].database == undefined)
									continue;
								
								var selector:DatabaseSelector = new DatabaseSelector();
								selector.group = group;
								
								var nodeName:String = settingGroup.children[i]["database"].nodeName;
								selector.nodeName = nodeName;
								selector.selected = settingGroup.nodeToUse == nodeName;
								panel.addChild(selector);
									
								for(var setting:String in settingGroup.children[i])
								{
									var subNode:ConfigurationNode = settingGroup.children[i][setting] as ConfigurationNode;
									if(subNode)
										createField(subNode, panel);
								}
								
								if(i < settingGroup.children.length - 1)
								{
									var rule:HRule = new HRule();
									rule.percentWidth = 100;
									panel.addChild(rule);
								}								
							}
						}
					}
				}
			}
			
			private function parseConfig():Object
			{
				var descriptorFile:File = File.applicationDirectory.resolvePath('config-descriptor.xml');
				var configFile:File = new File("C:/UniServer/www/open-source/aerial-test/src_php/lib/config/config.xml");
				var altConfigFile:File = new File("C:/UniServer/www/open-source/aerial-test/src_php/lib/config/config-alt.xml");
				
				
				var descriptorXML:XML;
				var configXML:XML;
				var altConfigXML:XML;
				
				var stream:FileStream = new FileStream();
				stream.open(descriptorFile, FileMode.READ);
				descriptorXML = XML(stream.readUTFBytes(stream.bytesAvailable));
				stream.close();
				
				stream.open(configFile, FileMode.READ);
				configXML = XML(stream.readUTFBytes(stream.bytesAvailable));
				stream.close();
				
				stream.open(altConfigFile, FileMode.READ);
				altConfigXML = XML(stream.readUTFBytes(stream.bytesAvailable));
				stream.close();
				
				var copy:XML = configXML;
				//copy = copy.appendChild(configXML.*);
				copy = copy.replace("debug-mode", altConfigXML["debug-mode"]);
				copy = copy.replace("database", altConfigXML["database"]);
				
				trace(copy.toXMLString());
				
				/**
				 * when in editor and alt stuff is loaded and you change shit, which to replace? config.xml or config-alt.xml?!
				 */
				var nodes:Object = {};
				
				var parser:ConfigurationUtil = ConfigurationUtil.instance;
				parser.configXML = configXML;
				parser.descriptorXML = descriptorXML;
				
				nodes["debug-mode"] = parser.getSimpleNode("debug-mode", "Debug Mode");
				nodes["paths"] = parser.getRegularNode("paths", "Paths");
				nodes["code-generation"] = parser.getRegularNode("code-generation", "Code Generation");
				nodes["options"] = parser.getRegularNode("options", "Options");
				nodes["server-url"] = parser.getSimpleNode("server-url", "Server URL");
				nodes["database"] = parser.getDatabaseNodes();
				
				return nodes;
			}
			
			private function createField(node:ConfigurationNode, panel:Panel):void
			{
				var editorClass:Class = getEditor(node);
				var editor:ConfigItem = new editorClass();
				editor.node = node;
				editor.percentWidth = 100;
				
				panel.addChild(editor);
			}
			
			private function getEditor(node:ConfigurationNode):Class
			{
				switch(node.type)
				{
					case "path":
						return PathItem;
						break;
					case "string":
						return StringItem;
						break;
					case "array":
						return ArrayItem;
						break;
					case "url":
						return URLItem;
						break;
					case "package":
					case "class":
						return PackageItem;
						break;
					case "folder_name":
						return FolderItem;
						break;
					case "boolean":
						return BooleanItem;
						break;
					case "permissions":
						return PermissionsItem;
						break;
					default:
						throw new Error("No editor type found for [" + node.type + "].");
						break;
				}
			}			

			private function modeChangeHandler(event:Event):void
			{
				ApplicationController.instance.configMode = modeGroup.selection.name;
			}
		]]>
	</mx:Script>
	
	<mx:HBox width="100%" verticalAlign="bottom" horizontalAlign="right" id="hbox1">
		<mx:Label text="CONFIGURATION EDITOR" styleName="weekDayChooserStyle" fontWeight="bold"/>
		
		<mx:Spacer width="100%"/>
		
		<mx:Button icon="@Embed(source='../assets/icons/dusseldorf/sign-in.png')" width="45" height="45"
				   click="dispatchEvent(new Event('back'))" toolTip="Back"/>
	</mx:HBox>
	
	<mx:HBox width="100%" verticalAlign="middle" horizontalAlign="center" styleName="myTitlePanel">
		<mx:RadioButton label="Simple" group="{modeGroup}" textAlign="center"
						name="{ConfigurationUtil.SIMPLE}" labelPlacement="bottom"
						creationComplete="event.currentTarget.selected = true"/>
		<mx:RadioButton label="Advanced" group="{modeGroup}" textAlign="center"
						name="{ConfigurationUtil.ADVANCED}" labelPlacement="bottom"/>
	</mx:HBox>
	
	<mx:RadioButtonGroup id="modeGroup" change="modeChangeHandler(event)"/>
	
	<mx:Canvas id="scrollerPanel" width="100%" height="100%" horizontalScrollPolicy="off" visible="false"
			   creationComplete="event.currentTarget.visible = true" creationCompleteEffect="Fade">
		<mx:Form id="form" labelWidth="200" left="8" right="8" paddingLeft="0">
			<mx:Panel id="importantPanel" title="IMPORTANT SETTINGS" width="100%" styleName="panelStyle"/>
			<mx:Panel id="databasePanel" title="DATABASE SETTINGS" width="100%" styleName="panelStyle"/>
			<mx:Panel id="pathsPanel" title="PATH SETTINGS" width="100%" styleName="panelStyle"/>
			<mx:Panel id="codeGenPanel" title="CODE GENERATION SETTINGS" width="100%" styleName="panelStyle"/>
			<mx:Panel id="optionsPanel" title="OTHER SETTINGS" width="100%" styleName="panelStyle"/>
		</mx:Form>
	</mx:Canvas>
</mx:VBox>