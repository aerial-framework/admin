<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()"
		 horizontalAlign="center" verticalAlign="middle" implements="interfaces.IRefreshable">
	<mx:states>
		<mx:State name="checkingVersion">
			<mx:RemoveChild target="{hbox1}"/>
			<mx:RemoveChild target="{dropArea}"/>
			<mx:AddChild relativeTo="{container}" position="lastChild">
				<mx:Spacer height="100%" id="spacer1"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{container}" position="lastChild">
				<mx:HBox width="100%" id="hbox2">
					<mx:Image source="@Embed(source='../assets/images/progress-indicator.swf')"/>
					<mx:Label text="Checking version information..." id="label1"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:RemoveChild target="{button1}"/>
		</mx:State>
		<mx:State name="downloadProgress" basedOn="checkingVersion">
			<mx:AddChild relativeTo="{container}" position="lastChild">
				<mx:ProgressBar width="100%" labelPlacement="center" id="downloadProgressBar" mode="manual"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{container}" position="lastChild">
				<mx:Button label="Cancel" click="cancel()"/>
			</mx:AddChild>
			<mx:SetStyle target="{container}" name="horizontalAlign" value="right"/>
			<mx:RemoveChild target="{hbox2}"/>
		</mx:State>
		<mx:State name="extracting" basedOn="checkingVersion">
			<mx:SetProperty target="{label1}" name="text" value="Processing archive"/>
			<mx:AddChild relativeTo="{container}" position="lastChild">
				<mx:Label text="{currentFile}" width="100%" textAlign="center" truncateToFit="true" fontWeight="bold"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox2}" position="lastChild">
				<mx:Spacer width="100%"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox2}" position="lastChild">
				<mx:Label text="{fileIndex} of {totalFiles}"/>
			</mx:AddChild>
			<mx:RemoveChild target="{spacer1}"/>
			<mx:AddChild relativeTo="{hbox2}" position="before">
				<mx:TextArea width="100%" height="100%" editable="false" selectable="false" id="fileLog"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="extractDone" basedOn="checkingVersion">
			<mx:RemoveChild target="{hbox2}"/>
			<mx:AddChild relativeTo="{container}" position="lastChild">
				<mx:HBox width="100%">
					<mx:Image source="@Embed(source='../assets/images/accept.png')"/>
					<mx:Label text="{totalFiles} files written."/>
					<mx:Spacer width="100%"/>
					<mx:Button label="Continue"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:VBox width="400" height="300" horizontalAlign="center" verticalAlign="middle" id="container">
		<mx:Button label="Download the latest archive" width="100%" height="50" id="button1"
				   click="versionCheck()" icon="@Embed(source='../assets/images/zip_file_download.png')"
				   styleName="buttonNoOfficial"/>
		<mx:HBox width="100%" verticalAlign="middle" horizontalGap="0" id="hbox1">
			<mx:HRule width="100%"/>
			<mx:Label text="OR"/>
			<mx:HRule width="100%"/>
		</mx:HBox>
		
		<mx:Panel width="100%" height="100%" id="dropArea" nativeDragEnter="onDragIn(event)" nativeDragDrop="onDragDrop(event)" styleName="dark" layout="vertical" horizontalAlign="center" verticalAlign="middle">
			<mx:Image horizontalCenter="0" verticalCenter="0" source="@Embed(source='../assets/images/drag-archive.png')" alpha="0.8"/>
			<mx:Canvas width="160" backgroundColor="#222222" backgroundAlpha="0.8" verticalCenter="0" horizontalCenter="0">
				<mx:Label text="Drop an archive here" horizontalCenter="0" verticalCenter="0" color="#CBCBCB" fontSize="11"/>
			</mx:Canvas>
		</mx:Panel>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import controllers.ArchiveController;
			import controllers.CoreVersionController;
			
			import events.ArchiveControlEvent;
			
			import interfaces.IRefreshable;
			
			import mx.controls.Alert;
			import mx.managers.DragManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private var archiveController:ArchiveController = ArchiveController.instance;
			private var versionController:CoreVersionController = CoreVersionController.instance;
			private var archiveInfo:Object = {};
			
			private var archive:File;
			private var destination:File;
			
			[Bindable] private var totalFiles:uint;
			[Bindable] private var fileIndex:uint;
			[Bindable] private var currentFile:String;
			
			public function init():void
			{
				archiveController.addEventListener(ArchiveControlEvent.ARCHIVE_READ, onExtractStarted);	
			}
			
			private function versionCheck():void
			{
				currentState = "checkingVersion";
				versionController.check();
				versionController.addEventListener(ResultEvent.RESULT, download);
				versionController.addEventListener(FaultEvent.FAULT, versionCheckError);
			}
			
			private function download(event:ResultEvent):void
			{				
				currentState = "downloadProgress";
				archiveInfo = versionController.latest;
				
				archiveController.addEventListener(ProgressEvent.PROGRESS, onDownloadProgress);
				archiveController.addEventListener(ArchiveControlEvent.DOWNLOAD_COMPLETE, browseForLocation);
				
				archive = File.applicationStorageDirectory.resolvePath("aerial-r" + archiveInfo["revision"] + ".zip");
				archiveController.downloadArchive(archiveInfo["url"], archiveInfo["hostname"], archive);
			}
			
			private function browseForLocation(event:Event=null):void
			{
				var file:File = new File();
				file.browseForDirectory("Select the destination for your project");
				file.addEventListener(Event.SELECT, onLocationSelect);
			}
			
			private function cancel():void
			{				
				archiveController.cancelDownload();
				downloadProgressBar.setProgress(0,1);
				
				currentState = null;
			}
			
			private function onDownloadProgress(event:ProgressEvent):void
			{
				downloadProgressBar.setProgress(event.bytesLoaded, event.bytesTotal);
				downloadProgressBar.label = "Downloading revision " + archiveInfo["revision"] + "...";
			}
			
			private function onLocationSelect(event:Event):void
			{
				destination = event.currentTarget as File;
				
				currentState = "extracting";
				archiveController.extractArchive(destination, archive);
			}
			
			private function onExtractStarted(event:ArchiveControlEvent):void
			{				
				archiveController.addEventListener(ArchiveControlEvent.FILE_OPEN, onFileOpen);
			}
			
			private function onFileOpen(event:ArchiveControlEvent):void
			{
				var file:File = archiveController.currentFile;
				
				totalFiles = archiveController.files.length;
				fileIndex = archiveController.fileIndex;
				
				if(fileIndex != totalFiles - 1)
				{
					currentFile = file.name + " (" + Math.ceil(file.size / 1024) + "Kb)";
					fileLog.text += currentFile + "\n";
					fileLog.verticalScrollPosition = fileLog.maxVerticalScrollPosition
				}
				else
					currentState = "extractDone";
			}
			
			private function onDragIn(event:NativeDragEvent):void
			{
				if(event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
					DragManager.acceptDragDrop(dropArea);
			}
			
			private function onDragDrop(event:NativeDragEvent):void
			{
				var files:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;				
				var file:File = files[0] as File;
				
				if(files.length > 1)
					Alert.show("Only one archive can be use at a time", "Error");
				else if(file.extension != "zip")
					Alert.show("Only zip archives can be used in this application", "Error");
				else
				{
					archive = file;
					browseForLocation();
				}
			}
			
			private function versionCheckError(event:FaultEvent):void
			{
				Alert.show("An error occured while trying to check the version information. Please try again.", "Error");
				currentState = null;
			}
		]]>
	</mx:Script>
</mx:VBox>