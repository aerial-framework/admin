<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" verticalAlign="top" keyUp="pageKeyHandler(event)"
		 			creationComplete="init(event)">
	<mx:states>
		<mx:State name="pathSelected"/>
		<mx:State name="valid">
			<mx:SetProperty target="{label1}" name="text" value="Valid Aerial project"/>
			<mx:AddChild relativeTo="{label1}" position="before">
				<mx:Image source="@Embed(source='../assets/icons/dusseldorf/check-16.png')"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox1}" position="lastChild">
				<mx:Button label="Switch to Project Mode" styleName="buttonOfficial" click="parseConfig()"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:HRule width="100%"/>
	<mx:HBox width="100%" color="#DDDDDD" verticalAlign="middle" id="hbox1">
		<mx:Button label="Navigate to project path" icon="@Embed(source='../assets/icons/dusseldorf/folder-16.png')"
				   click="browseForPath()"/>
		<mx:Spacer width="100%"/>
		<mx:Label text="No path selected" color="#222222" id="label1"/>
	</mx:HBox>
	<mx:HRule width="100%"/>
	
	<mx:FileSystemTree id="tree" width="100%" showExtensions="true" showIcons="true" allowMultipleSelection="false"
					   enumerationMode="{FileSystemEnumerationMode.DIRECTORIES_FIRST}" height="100%" filterFunction="checkExtension"
					   directoryOpening="folderSelected(null, event.file)" borderStyle="none"
					   keyUp="treeKeyHandler(event)" backgroundAlpha="0"/>
	<!-- backgroundAlpha="0.2" backgroundColor="#222222" color="#DDDDDD" -->
	<mx:HBox width="100%" verticalAlign="middle">
		<mx:TextInput id="path" keyDown="pathChange(event)" width="100%"/>
		
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import controllers.ProjectController;
			
			import mx.controls.Alert;
			import mx.controls.FileSystemEnumerationMode;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import utils.FileUtil;			
			
			private var lastPotentialMatch:String;
			
			private function init(event:FlexEvent):void
			{
				//path.getTextField().addEventListener(KeyboardEvent.KEY_DOWN
				
				path.text = File.desktopDirectory.nativePath;
				pathChange();
			}
			
			private function browseForPath():void
			{
				var folder:File = new File();
				folder.addEventListener(Event.SELECT, folderSelected);
				folder.browseForDirectory("Navigate to project path");
			}
			
			private function checkExtension(file:File):Boolean
			{
				return file.name == "project.xml" || file.isDirectory;
			}

			private function folderSelected(event:Event=null, file:File=null):void
			{
				var folder:File;
				
				if(event)
					folder = event.currentTarget as File;
				else if(file)
					folder = file;
				
				if(folder.exists)
					path.text = folder.nativePath;
				
				pathChange();
			}

			private function pathChange(event:KeyboardEvent=null):void
			{
				if(event)
					if(event.altKey)
					{
						event.preventDefault();
						event.stopImmediatePropagation();
						event.stopPropagation();
						return;
					}

				var file:File;
				try
				{
					file = new File(path.text);
					tree.directory = file;
				}
				catch(e:Error)		// catch unnecessary errors
				{
				}
				finally
				{
					if(file && file.exists)
						checkForProject();
				}
				//trace(file.exists ? file.nativePath : "Nope"); 
			}

			private function checkForProject():void
			{
				var potential:File = new File(path.text);
				if(!potential || !potential.exists)
					return;
				
				if(lastPotentialMatch != potential.nativePath)
					lastPotentialMatch = potential.nativePath;
				
				var projectXML:File = new File(lastPotentialMatch).resolvePath("project.xml");
				if(projectXML.exists)
				{
					// the project descriptor will never be bigger than 1Mb, so ignore bigger (and potentially irrelevant) files
					if(projectXML.size < (1024 * 1024))
						validateProject(projectXML);
					else
						currentState = null;
				}
				else
					currentState = null; 
			}
			
			private function validateProject(projectXML:File):void
			{
				var descriptor:XML = XML(FileUtil.read(projectXML));
				ProjectController.instance.savePath.dispatch(projectXML);
				
				currentState = "valid";
			}
			
			private function treeKeyHandler(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ENTER)
				{
					path.text = tree.selectedItem.nativePath;
					pathChange();
				}
			}

			private function pageKeyHandler(event:KeyboardEvent):void
			{
				if(event.altKey && event.keyCode == Keyboard.UP)
				{
					path.text = tree.directory.resolvePath("../").nativePath;
					pathChange();
				}
			}

			private function parseConfig():void
			{
				var config:File = new File("C:/UniServer/www/open-source/aerial-test/src_php/lib/aerial/config.php");
				var stream:FileStream = new FileStream();
				stream.open(config, FileMode.READ);
				var content:String = stream.readUTFBytes(stream.bytesAvailable);
				stream.close();
				
				var pattern:RegExp = /define\("(.\w+)",\s?("?(.+)"?)\);/g;
				var matches:Array = content.match(pattern);
				var definitions:Object = {};
				
				for each(var match:String in matches)
				{
					var key:String = match.replace(pattern, "$1");
					var value:String = match.replace(pattern, "$2");
					
					definitions[key] = value.replace(/\"/g, "");
				}
				
				Alert.show(definitions["GATEWAY_URL"], "Is this your gateway URL?");
			}

		]]>
	</mx:Script>
</mx:VBox>