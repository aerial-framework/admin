<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" verticalAlign="top" keyUp="pageKeyHandler(event)"
		 			show="init()" implements="interfaces.IRefreshable">
	<mx:states>
		<mx:State name="valid">
			<mx:SetProperty target="{label1}" name="text" value="Valid Aerial project"/>
			<mx:AddChild relativeTo="{label1}" position="before">
				<mx:Image source="@Embed(source='../assets/icons/dusseldorf/check-16.png')"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox1}" position="lastChild">
				<mx:Button label="Open Project" click="parseConfig()" styleName="buttonOfficial"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox2}" position="lastChild">
				<mx:Button label="Open Project" click="parseConfig()" styleName="buttonOfficial"/>
			</mx:AddChild>
			<mx:RemoveChild target="{label2}"/>
		</mx:State>
	</mx:states>
	<mx:HRule width="100%"/>
	<mx:HBox width="100%" color="#DDDDDD" verticalAlign="middle" id="hbox1">
		<mx:Button label="Navigate to project path" icon="@Embed(source='../assets/icons/dusseldorf/folder-16.png')"
				   click="browseForPath()"/>
		<mx:Spacer width="100%" id="spacer1"/>
		<mx:Label text="No path selected" color="#222222" id="label1"/>
	</mx:HBox>
	
	<mx:HRule width="100%"/>
	
	<mx:FileSystemTree id="tree" width="100%" showExtensions="true" showIcons="true" allowMultipleSelection="false"
					   enumerationMode="{FileSystemEnumerationMode.DIRECTORIES_FIRST}" height="100%" filterFunction="checkExtension"
					   directoryOpening="folderSelected(null, event.file)" borderStyle="none"
					   keyUp="treeKeyHandler(event)" backgroundAlpha="0"/>
	<mx:VBox width="100%" verticalAlign="middle" horizontalAlign="right" verticalGap="1">
		<mx:TextInput id="path" keyDown="pathChange(event)" width="100%" tabEnabled="false"/>
		<mx:HBox width="100%" verticalAlign="middle" id="hbox2">
			<mx:Label id="errorTxt" fontSize="11" color="#FF0000" width="100%"/>
			
			<mx:Label text="Tab / Shift+Tab to complete, Alt+Up to navigate up tree" fontSize="8" color="#585858" id="label2"/>
		</mx:HBox>
	</mx:VBox>
	
	<mx:Array id="existingProjects"/>
	
	<mx:Script>
		<![CDATA[
			import controllers.ApplicationController;
			import controllers.FileController;
			import controllers.ProjectController;
			
			import interfaces.IRefreshable;
			
			import mx.controls.Alert;
			import mx.controls.FileSystemEnumerationMode;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import utils.FileUtil;			
			
			private var lastPotentialMatch:String;
			
			private var lastBase:String;
			private var lastTabOptions:Array;
			private var lastTabIndex:int = -1;
			
			private var projectFile:File;
			
			private var appControl:ApplicationController = ApplicationController.instance;
			
			public function init():void
			{
				path.text = File.desktopDirectory.nativePath;
				pathChange();
			}
			
			private function browseForPath():void
			{
				var folder:File = new File();
				folder.addEventListener(Event.SELECT, folderSelected);
				folder.browseForDirectory("Navigate to project path");
			}
			
			private function getCloseMatches(input:String, options:Array):Array
			{
				var sorted:Array = options.sort(Array.CASEINSENSITIVE);
				var close:Array = [];
				
				if(!input || input == "")
				{
					close = sorted.sort();
					return close;
				}
				
				for each(var option:String in sorted)
					if(option.substr(0, input.length) == input)
						close.push(option);
				
				return close.sort();
			}
			
			private function checkExtension(file:File):Boolean
			{
				return file.name == "project.xml" || file.isDirectory;
			}

			private function folderSelected(event:Event=null, file:File=null):void
			{
				var folder:File;
				
				if(event)
					folder = event.currentTarget as File;
				else if(file)
					folder = file;
				
				if(folder.exists)
					path.text = folder.nativePath;
				
				pathChange();
			}

			private function pathChange(event:KeyboardEvent=null):void
			{					
				errorTxt.text = "";
				path.text = path.text.replace(/\\/g, "/");
				
				if(event)
				{
					if(event.altKey)
					{
						event.preventDefault();
						event.stopImmediatePropagation();
						event.stopPropagation();
						return;
					}
					
					if(event.keyCode == Keyboard.TAB)
					{
						event.preventDefault();
						event.stopImmediatePropagation();
						event.stopPropagation();
						
						if(!lastBase || lastTabOptions.length == 0)
						{
							var foldersInPath:Array = tree.directory.getDirectoryListing();
							var options:Array = [];
							for each(var folder:File in foldersInPath)
								if(folder.isDirectory)
									options.push(folder.name);
							
							var input:String = path.text.substr(path.text.lastIndexOf("/") + 1);
							if(!path.text || path.text == "")
								return;
							lastBase = path.text.substr(0, path.text.lastIndexOf("/"));
							lastTabOptions = getCloseMatches(input, options);
							lastTabIndex = -1;
						}
						
						if(lastTabOptions.length > 0)
						{
							lastTabIndex = (event.shiftKey ? lastTabIndex - 1 : lastTabIndex + 1);
							
							if(lastTabIndex == lastTabOptions.length)
								lastTabIndex = 0;
							
							if(lastTabIndex < 0)
								lastTabIndex = lastTabOptions.length - 1;
							
							path.text = lastBase + "/" + lastTabOptions[lastTabIndex] + "/";
							path.setSelection(path.text.length, path.text.length);
						}
					}
					else
					{
						if(!event.shiftKey)
						{
							lastBase = "";
							lastTabOptions = [];
							lastTabIndex = -1;
						}
					}
				}

				var file:File;
				try
				{
					file = new File(path.text);
					tree.directory = file;
					
					if(file && file.exists)
						checkForProject();
				}
				catch(e:Error)		// catch unnecessary errors
				{
					currentState = null;
				}
				//trace(file.exists ? file.nativePath : "Nope"); 
			}

			private function checkForProject():void
			{
				var potential:File = new File(path.text);
				if(!potential || !potential.exists)
					return;
				
				if(lastPotentialMatch != potential.nativePath)
					lastPotentialMatch = potential.nativePath;
				
				var projectXML:File = new File(lastPotentialMatch).resolvePath("project.xml");
				if(projectXML.exists)
				{
					// the project descriptor will never be bigger than 1Mb, so ignore bigger (and potentially irrelevant) files
					if(projectXML.size < (1024 * 1024))
						validateProject(projectXML);
					else
					{
						lastPotentialMatch = null;
						currentState = null;
					}
				}
				else
				{
					lastPotentialMatch = null;
					currentState = null;
				}
			}
			
			private function validateProject(projectFile:File):void
			{
				this.projectFile = projectFile;
				
				var contents:XML = XML(FileController.instance.read(projectFile));
				var configPath:String = "src_php/config";
				var configFile:File = projectFile.parent.resolvePath(configPath + "/config.xml");
				
				if(!configFile.exists)
				{
					currentState = null;
					errorTxt.text = "Configuration file not found under " + configPath + "/config.xml";
					return;
				}
				
				currentState = "valid";
			}
			
			private function treeKeyHandler(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ENTER)
				{
					path.text = tree.selectedItem.nativePath;
					pathChange();
				}
			}

			private function pageKeyHandler(event:KeyboardEvent):void
			{
				if(event.altKey && event.keyCode == Keyboard.UP)
				{
					path.text = tree.directory.resolvePath("../").nativePath;
					pathChange();
				}
			}

			private function parseConfig():void
			{
				ProjectController.instance.savePath.dispatch(this.projectFile.parent);
				
				appControl.projectDirectory = this.projectFile.parent;
				
				// find config path
				var projectXML:File = new File(path.text + "/project.xml");
				var contents:XML = XML(FileController.instance.read(projectXML));
				var configPath:String = "src_php/config";
				var configFile:File = appControl.projectDirectory.resolvePath(configPath + "/config.xml");
				var configAltFile:File = appControl.projectDirectory.resolvePath(configPath + "/config-alt.xml");
				
				appControl.configDirectory = appControl.projectDirectory.resolvePath(configPath);
				appControl.configFile = configFile;
				appControl.configAltFile = configAltFile;
				
				appControl.showPage.dispatch(ApplicationController.OPEN_PROJECT);
			}

		]]>
	</mx:Script>
</mx:VBox>